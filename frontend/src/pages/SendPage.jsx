import React, { useState, useEffect } from "react";import { useNavigate } from "react-router-dom";import { useDropzone } from "react-dropzone";import { motion, AnimatePresence } from "framer-motion";import { toast } from "react-toastify";import Lottie from "lottie-react";import useAppStore from "../store/useAppStore";import WebRTCService from "../services/webrtcService";import { AnimatedBackdrop } from "../components";import sendFileAnimation from "../assets/lottie/send_file.json";const SendPage = () => {    const navigate = useNavigate();    const {        sessionCode,        role,        selectedFiles,        connectionStatus,        socket,        webrtcService,        showConnectionRequest,        requestingPeer,        setSessionCode,        generateSessionCode,        setRole,        setSelectedFiles,        setConnectionStatus,        setSocket,        setRequestingPeer,        setShowConnectionRequest,        setWaitingForApproval,        setWebrtcService,        cleanup,    } = useAppStore();    useEffect(() => {        if (!webrtcService) {            const service = new WebRTCService();            setWebrtcService(service);        }    }, [webrtcService, setWebrtcService]);    const [sessionCreated, setSessionCreated] = useState(false);    useEffect(() => {        setRole("sender");        return () => {        };    }, []);    const onDrop = (acceptedFiles) => {        setSelectedFiles(acceptedFiles);    };    const { getRootProps, getInputProps, isDragActive } = useDropzone({        onDrop,        multiple: true,    });    const handleCreateSession = async () => {        if (selectedFiles.length === 0) {            toast.error("Please select files to share first");            return;        }        if (!webrtcService) {            toast.error("WebRTC service not ready. Please refresh the page.");            return;        }        try {            const socket = await webrtcService.connectToSignalingServer();            setSocket(socket);            const code = generateSessionCode();            socket.on("session-created", () => {                setSessionCreated(true);                toast.success("Session created! Share the code with receiver.");            });            socket.on("connection-request", ({ receiverId }) => {                setRequestingPeer(receiverId);                setShowConnectionRequest(true);            });            socket.on("connection-accepted", () => {                setShowConnectionRequest(false);                setConnectionStatus("connecting");                webrtcService.onConnectionStatusChange = (status) => {                    setConnectionStatus(status);                    if (status === "connected") {                        navigate("/transfer");                    }                };                webrtcService.createOffer(code);            });            socket.emit("create-session", { sessionCode: code });        } catch (error) {            console.error("Failed to create session:", error);            toast.error("Failed to connect to server");        }    };    const handleAcceptConnection = () => {        if (webrtcService.socket) {            webrtcService.socket.emit("accept-connection", {                sessionCode,                receiverId: requestingPeer,            });        }    };    const handleRejectConnection = () => {        if (webrtcService.socket) {            webrtcService.socket.emit("reject-connection", {                sessionCode,                receiverId: requestingPeer,            });        }        setShowConnectionRequest(false);        setRequestingPeer(null);    };    const formatFileSize = (bytes) => {        if (bytes === 0) return "0 Bytes";        const k = 1024;        const sizes = ["Bytes", "KB", "MB", "GB"];        const i = Math.floor(Math.log(bytes) / Math.log(k));        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];    };    const copyToClipboard = async () => {        try {            if (navigator.clipboard && window.isSecureContext) {                await navigator.clipboard.writeText(sessionCode);                toast.success("Session code copied to clipboard!");            } else {                const textArea = document.createElement("textarea");                textArea.value = sessionCode;                textArea.style.position = "fixed";                textArea.style.left = "-999999px";                textArea.style.top = "-999999px";                document.body.appendChild(textArea);                textArea.focus();                textArea.select();                try {                    const successful = document.execCommand("copy");                    if (successful) {                        toast.success("Session code copied to clipboard!");                    } else {                        throw new Error("Copy command failed");                    }                } catch (fallbackError) {                    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {                        alert(`Copy this session code: ${sessionCode}`);                        toast.info("Please copy the session code manually");                    } else {                        throw fallbackError;                    }                } finally {                    document.body.removeChild(textArea);                }            }        } catch (error) {            console.error("Failed to copy:", error);            alert(`Copy this session code: ${sessionCode}`);            toast.info("Please copy the session code manually");        }    };    return (        <div className="min-h-screen p-4 relative">            <AnimatedBackdrop />            <div className="max-w-4xl mx-auto relative z-10">                {}                <div className="relative flex items-center mb-8 mt-5">                    <button                        onClick={() => {                            webrtcService?.cleanup();                            navigate("/");                        }}                        className="flex items-center text-blue-600 hover:text-blue-700 font-medium transition-colors z-10"                    >                        <svg                            width="20"                            height="20"                            viewBox="0 0 20 20"                            fill="none"                            className="mr-2"                        >                            <path                                d="M12.5 15L7.5 10L12.5 5"                                stroke="currentColor"                                strokeWidth="2"                                strokeLinecap="round"                                strokeLinejoin="round"                            />                        </svg>                        Back                    </button>                    <h1 className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-[24px] sm:text-3xl font-bold text-gray-900 whitespace-nowrap">                        Send Files                    </h1>                    <div className="w-16" />                </div>                {}                {!sessionCreated && (                    <motion.div                        initial={{ opacity: 0, y: 20 }}                        animate={{ opacity: 1, y: 0 }}                        className="mb-8"                    >                        <div                            {...getRootProps()}                            className={`border-2 border-dashed border-gray-300 rounded-xl p-12 text-center cursor-pointer transition-colors ${                                isDragActive                                    ? "border-blue-500 bg-blue-50"                                    : "hover:border-gray-400"                            }`}                        >                            <input {...getInputProps()} />                            <div className="mb-4">                                <Lottie                                    animationData={sendFileAnimation}                                    style={{ width: 120, height: 120 }}                                    className="mx-auto"                                />                            </div>                            {isDragActive ? (                                <p className="text-xl text-blue-600">                                    Drop the files here...                                </p>                            ) : (                                <div>                                    <p className="text-xl text-gray-600 mb-2">                                        Drag & drop files here, or click to                                        select                                    </p>                                    <p className="text-sm text-gray-500">                                        Support for multiple files of any type                                    </p>                                </div>                            )}                        </div>                    </motion.div>                )}                {}                {selectedFiles.length > 0 && (                    <motion.div                        initial={{ opacity: 0, y: 20 }}                        animate={{ opacity: 1, y: 0 }}                        className="bg-white rounded-xl shadow-md p-6 mb-8"                    >                        <h3 className="text-lg font-semibold mb-4">                            Selected Files ({selectedFiles.length})                        </h3>                        <div className="space-y-3">                            {selectedFiles.map((file, index) => (                                <div                                    key={index}                                    className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"                                >                                    <div className="flex items-center">                                        <div className="text-2xl mr-3">📄</div>                                        <div>                                            <p className="font-medium text-gray-900">                                                {file.name}                                            </p>                                            <p className="text-sm text-gray-500">                                                {formatFileSize(file.size)}                                            </p>                                        </div>                                    </div>                                    {!sessionCreated && (                                        <button                                            onClick={() => {                                                const newFiles =                                                    selectedFiles.filter(                                                        (_, i) => i !== index                                                    );                                                setSelectedFiles(newFiles);                                            }}                                            className="text-red-500 hover:text-red-700"                                        >                                            ✕                                        </button>                                    )}                                </div>                            ))}                        </div>                        <div className="mt-4 p-3 bg-blue-50 rounded-lg">                            <p className="text-sm text-blue-800">                                Total size:{" "}                                {formatFileSize(                                    selectedFiles.reduce(                                        (total, file) => total + file.size,                                        0                                    )                                )}                            </p>                        </div>                    </motion.div>                )}                {}                {!sessionCreated && selectedFiles.length > 0 && (                    <motion.div                        initial={{ opacity: 0, y: 20 }}                        animate={{ opacity: 1, y: 0 }}                        className="text-center"                    >                        <button                            onClick={handleCreateSession}                            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-8 rounded-xl shadow-lg transition-colors"                        >                            Generate Session Code                        </button>                    </motion.div>                )}                {}                {sessionCreated && sessionCode && (                    <motion.div                        initial={{ opacity: 0, scale: 0.95 }}                        animate={{ opacity: 1, scale: 1 }}                        className="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl p-8 text-center mb-8"                    >                        <h3 className="text-xl font-semibold mb-4">                            Session Code                        </h3>                        <div className="bg-white/20 rounded-lg p-4 mb-4">                            <p className="text-3xl font-mono font-bold tracking-widest">                                {sessionCode}                            </p>                        </div>                        <button                            onClick={copyToClipboard}                            className="bg-white/20 hover:bg-white/30 text-white font-medium py-2 px-6 rounded-lg transition-colors"                        >                            📋 Copy Code                        </button>                        <p className="mt-4 text-blue-100">                            Share this code with the receiver to start the                            transfer                        </p>                    </motion.div>                )}                {}                {sessionCreated && !showConnectionRequest && (                    <motion.div                        initial={{ opacity: 0, y: 20 }}                        animate={{ opacity: 1, y: 0 }}                        className="bg-white rounded-xl shadow-md p-8 text-center"                    >                        <div className="animate-pulse text-4xl mb-4">⏳</div>                        <h3 className="text-xl font-semibold mb-2">                            Waiting for receiver...                        </h3>                        <p className="text-gray-600">                            The receiver needs to enter your session code to                            connect                        </p>                    </motion.div>                )}                {}                <AnimatePresence>                    {showConnectionRequest && (                        <motion.div                            initial={{ opacity: 0 }}                            animate={{ opacity: 1 }}                            exit={{ opacity: 0 }}                            className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"                        >                            <motion.div                                initial={{ scale: 0.95 }}                                animate={{ scale: 1 }}                                exit={{ scale: 0.95 }}                                className="bg-white rounded-xl p-8 max-w-md w-full"                            >                                <div className="text-center">                                    <div className="text-4xl mb-4">🔔</div>                                    <h3 className="text-xl font-semibold mb-4">                                        Incoming Connection                                    </h3>                                    <p className="text-gray-600 mb-6">                                        Someone wants to receive your files. Do                                        you want to accept this connection?                                    </p>                                    <div className="flex gap-4">                                        <button                                            onClick={handleRejectConnection}                                            className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-3 px-6 rounded-lg transition-colors"                                        >                                            Reject                                        </button>                                        <button                                            onClick={handleAcceptConnection}                                            className="flex-1 bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"                                        >                                            Accept                                        </button>                                    </div>                                </div>                            </motion.div>                        </motion.div>                    )}                </AnimatePresence>            </div>        </div>    );};export default SendPage;